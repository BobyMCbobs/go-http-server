---
stages:
  - conform
  - test
  - codequality
  - build
  - pages

include:
  template: Dependency-Scanning.gitlab-ci.yml

variables:
  APP_BUILD_VERSION: 0.0.0
  APP_BUILD_MODE: development
  IMAGE_GOLANG_ALPINE: docker.io/golang:1.22.1-alpine3.19@sha256:fc5e5848529786cf1136563452b33d713d5c60b2c787f6b2a077fa6eeefd9114
  IMAGE_PYTHON: docker.io/python:3.8-buster@sha256:04c3f641c2254c229fd2f704c5199ff4bea57d26c1c29008ae3a4afddde98709
  IMAGE_GOLANGCI_LINT: docker.io/golangci/golangci-lint:v1.53.3@sha256:1e0e2867b387bf68762427db499a963e43582b06819992db205fc31daa75ceea
  COSIGN_YES: "true"

.image-set-build-env: &image-set-build-env |
  echo "Commit made on '${CI_COMMIT_TIMESTAMP}'"
  export APP_BUILD_HASH="$CI_COMMIT_SHORT_SHA"
  export APP_BUILD_DATE="$(git show -s --format=%cd --date=format:'%Y.%m.%d.%H%M')"
  export APP_BUILD_VERSION=0.0.0
  export APP_BUILD_MODE=development
  export IMAGE_DESTINATIONS="latest"
  if [[ ! -z "$CI_COMMIT_TAG" ]]; then
    export APP_BUILD_VERSION="$CI_COMMIT_TAG"
    export APP_BUILD_MODE=production
    export IMAGE_DESTINATIONS="$APP_BUILD_VERSION"
  fi

.setup-testing-repo: &setup-testing-repo |
  echo 'https://dl-cdn.alpinelinux.org/alpine/edge/testing' | tee -a /etc/apk/repositories

build-container:
  only:
    - main
    - tags
  stage: build
  image:
    name: $IMAGE_GOLANG_ALPINE
    entrypoint: [""]
  retry: 2
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: "sigstore"
  variables:
    KO_DOCKER_REPO: "$CI_REGISTRY_IMAGE"
  before_script:
    - set -x
    - *setup-testing-repo
    - apk add --no-cache curl cosign ko git
    - export KO_DOCKER_REPO="$(echo ${KO_DOCKER_REPO} | tr '[:upper:]' '[:lower:]')"
    - ko login "${CI_REGISTRY}" -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}"
    - *image-set-build-env
  script:
    - ./hack/publish.sh --sign

build-backend-smoketest:
  stage: codequality
  image: $IMAGE_GOLANG_ALPINE
  before_script:
    - apk add --no-cache git
  script:
    - ./hack/verify-build-smoketest.sh

spellcheck:
  stage: codequality
  image:
    name: $IMAGE_GOLANG_ALPINE
    entrypoint: [""]
  allow_failure: true
  before_script:
    - apk add --no-cache git
  script:
    - ./hack/verify-spellcheck.sh

lint-backend:
  stage: codequality
  image:
    name: $IMAGE_GOLANG_ALPINE
    entrypoint: [""]
  allow_failure: true
  before_script:
    - apk add --no-cache git
  script:
    - ./hack/verify-lint-backend.sh

gotest:
  stage: codequality
  image: $IMAGE_GOLANG_ALPINE
  before_script:
    - apk add --no-cache git
  script:
    - ./hack/verify-gotest.sh

govet:
  stage: codequality
  image: $IMAGE_GOLANG_ALPINE
  before_script:
    - apk add --no-cache git
  script:
    - ./hack/verify-govet.sh

gofmt:
  stage: codequality
  image: $IMAGE_GOLANG_ALPINE
  before_script:
    - apk add --no-cache git
  script:
    - ./hack/verify-gofmt.sh

goimports:
  stage: codequality
  image: $IMAGE_GOLANG_ALPINE
  before_script:
    - apk add --no-cache git
  script:
    - ./hack/verify-goimports.sh

golangci-lint:
  stage: codequality
  image:
    name: $IMAGE_GOLANGCI_LINT
    entrypoint: [""]
  script:
    - ./hack/verify-golangci-lint.sh

govulncheck:
  stage: codequality
  image: $IMAGE_GOLANG_ALPINE
  before_script:
    - apk add --no-cache git
  script:
    - ./hack/verify-govulncheck.sh

pages-smoketest:
  image: $IMAGE_PYTHON
  stage: codequality
  script:
    - ./hack/build-docs.sh

pages:
  image: $IMAGE_PYTHON
  stage: pages
  script:
    - ./hack/build-docs.sh
  artifacts:
    paths:
      - public
  only:
    - main

conform:
  stage: conform
  only:
    - merge_requests
  image:
    name: docker.io/library/alpine:3.18
    entrypoint: [""]
  before_script:
    - apk add --no-cache curl git
    - git fetch origin
    - |
      curl -sSL \
        -o /usr/local/bin/conform \
        https://github.com/siderolabs/conform/releases/download/v0.1.0-alpha.27/conform-linux-amd64
    - chmod +x /usr/local/bin/conform
  script:
    - conform enforce --commit-ref=refs/remotes/origin/main
