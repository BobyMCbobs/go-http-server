stages:
  - lint
  - build
  - post-build
  - pages

variables:
  ARCH_DEFAULT: "amd64"
  ARCHES: amd64 arm64
  APP_BUILD_VERSION: 0.0.0
  APP_BUILD_MODE: development
  REGISTRIES: "$CI_REGISTRY"

.kaniko-build-pre-script: &kaniko-build-pre-script |
  set -x
  mkdir -p /kaniko/.docker
  echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json

.kaniko-build-taggable-name: &kaniko-build-taggable-name |
  set -x
  COMMIT_HASH="???"
  BUILD_DATE="$(date -u +%Y-%m-%d_%I:%M:%S%p)"
  if [[ -z "$CI_COMMIT_TAG" ]]; then
    COMMIT_HASH="$CI_COMMIT_SHORT_SHA"
    PRINTABLE_COMMIT_HASH="-$COMMIT_HASH"
  fi
  if [[ ! "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]] && [[ -z "$CI_COMMIT_TAG" ]]; then
    BRANCH_NAME="-$CI_COMMIT_BRANCH"
  fi
  ARCH_TAGGABLE_NAME="$(echo $ARCH | tr -d '/')"

.kaniko-pre-build-release-version: &kaniko-pre-build-release-version |
  if [[ ! -z "$CI_COMMIT_TAG" ]]; then
    export APP_BUILD_VERSION="$CI_COMMIT_TAG"
    export APP_BUILD_MODE=production
    export KANIKO_EXTRA_DESTINATION="--destination $CI_REGISTRY_IMAGE:$APP_BUILD_VERSION-$ARCH"
  fi

.kaniko-build: &kaniko-build |
  /kaniko/executor \
    --snapshotMode=redo \
    --context $CI_PROJECT_DIR \
    --dockerfile $CI_PROJECT_DIR/build/Dockerfile \
    --destination $CI_REGISTRY_IMAGE:latest$BRANCH_NAME-$ARCH \
    $KANIKO_EXTRA_DESTINATION \
    --build-arg GOARCH="$ARCH" \
    --build-arg APP_BUILD_VERSION="$APP_BUILD_VERSION" \
    --build-arg APP_BUILD_DATE="$BUILD_DATE" \
    --build-arg APP_BUILD_HASH="$COMMIT_HASH" \
    --build-arg APP_BUILD_MODE="$APP_BUILD_MODE"

.build-container: &build-container
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug-v1.3.0
    entrypoint: [""]
  retry: 2
  before_script:
    - *kaniko-build-pre-script
    - *kaniko-build-taggable-name
    - *kaniko-pre-build-release-version
  script:
    - *kaniko-build

build-container-amd64:
  <<: *build-container
  variables:
    ARCH: "amd64"

build-container-arm64:
  <<: *build-container
  variables:
    ARCH: "arm64"

tag-container-image:
  stage: post-build
  image: docker:20.10.6
  before_script:
    - *kaniko-build-pre-script
    - *kaniko-build-taggable-name
  script:
    - |
        set -x
        cp -rf /kaniko/.docker $HOME/.docker
        if [[ -z "$CI_COMMIT_TAG" ]]; then
          APP_BUILD_VERSION=
        fi
        for tag in $APP_VERSION latest$BRANCH_NAME; do
          for reg in $REGISTRIES; do
            export IMAGE_TAG_WITH_ARCH=""
            for arch in $ARCHES; do
              IMAGE="$reg/$PROJECT_PATH:$tag-$arch"
              export IMAGE_TAG_WITH_ARCH="$IMAGE_TAG_WITH_ARCH $IMAGE"
            done
            docker manifest create $reg/$PROJECT_PATH:$tag $IMAGE_TAG_WITH_ARCH
            for arch in $ARCHES; do
              # TODO tidy up
              EXTRA_ARGS=""
              if [ "$arch" = "arm64" ]; then
                EXTRA_ARGS="--variant v8"
              fi
              docker manifest annotate $reg/$PROJECT_PATH:$tag $reg/$PROJECT_PATH:$tag-$arch --os linux --arch $arch $EXTRA_ARGS
            done
            docker manifest push $reg/$PROJECT_PATH:$tag
          done
        done

spell_check:
  stage: lint
  image: golang:1.13.10-alpine3.11
  allow_failure: true
  before_script:
    - go get -u github.com/client9/misspell/cmd/misspell
  script:
    - misspell -error main.go cmd pkg docs k8s-manifests README*

lint_backend:
  stage: lint
  image: golang:1.13.10-alpine3.11
  allow_failure: true
  before_script:
    - apk add git gcc
    - go get -u golang.org/x/lint/golint
  script:
    - golint -set_exit_status ./...

lint_helm_chart:
  stage: lint
  image: alpine:3.11
  variables:
    HELM_LINK: https://get.helm.sh/helm-v3.4.0-linux-amd64.tar.gz
    HELM_HASH: 270acb0f085b72ec28aee894c7443739271758010323d72ced0e92cd2c96ffdb
  allow_failure: true
  before_script:
    - apk add curl
    - curl -L -o helm.tar.gz $HELM_LINK
    - |
        if [ ! $(sha256sum helm.tar.gz) = $HELM_HASH ]; then
          exit 1
        fi
    - cat helm.tar.gz | tar --directory /usr/local/bin --extract -xz --strip-components 1 linux-amd64/helm
  script:
    - helm lint deployments/go-http-server

pages:
  image: python:3.8-buster
  stage: pages
  before_script:
    - pip install mkdocs-material
  script:
  - mkdocs build
  - mv site public
  artifacts:
    paths:
    - public
  only:
    - master
